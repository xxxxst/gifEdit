<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:local="clr-namespace:csharpHelp.ui">

	<Style x:Key="BaseTextBoxFile" TargetType="{x:Type local:TextBoxFile}">
		<!--<Setter Property="BorderThickness" Value="{Binding BorderThickness,RelativeSource={RelativeSource Self}}"/>-->
		<Setter Property="BorderBrush" Value="#a1a1a1"/>
		
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type local:TextBoxFile}">
					<Grid>
						<Grid.ColumnDefinitions>
							<ColumnDefinition Width="*"/>
							<ColumnDefinition Width="{Binding ButtonWidth,RelativeSource={RelativeSource TemplatedParent}}"/>
						</Grid.ColumnDefinitions>

						<local:TextBoxLabel
							x:Name="txt"
							Grid.Column="0"
							Tag="{Binding .,RelativeSource={RelativeSource TemplatedParent}}"
							Content="{Binding Content,RelativeSource={RelativeSource TemplatedParent}}"
							ContentColor="{Binding ContentColor,RelativeSource={RelativeSource TemplatedParent}}"
							LeftWidth="{Binding LeftWidth,RelativeSource={RelativeSource TemplatedParent}}"
							RightWidth="{Binding RightWidth,RelativeSource={RelativeSource TemplatedParent}}"
							TipColor="{Binding TipColor,RelativeSource={RelativeSource TemplatedParent}}"
							ToolTip="{Binding ToolTip,RelativeSource={RelativeSource TemplatedParent}}"
							Tip="{Binding Tip,RelativeSource={RelativeSource TemplatedParent}}"
							
							Height="{Binding Height,RelativeSource={RelativeSource TemplatedParent}}"
							Text="{Binding ShowText, RelativeSource={RelativeSource TemplatedParent}, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
							HorizontalContentAlignment="{Binding HorizontalContentAlignment,RelativeSource={RelativeSource TemplatedParent}}"
							VerticalContentAlignment="{Binding VerticalContentAlignment,RelativeSource={RelativeSource TemplatedParent}}"
							Background="{Binding Background,RelativeSource={RelativeSource TemplatedParent}}"
							Foreground="{Binding Foreground,RelativeSource={RelativeSource TemplatedParent}}"
							CaretBrush="{Binding CaretBrush,RelativeSource={RelativeSource TemplatedParent}}"
							TextWrapping="{Binding TextWrapping,RelativeSource={RelativeSource TemplatedParent}}"
							TextAlignment="{Binding TextAlignment,RelativeSource={RelativeSource TemplatedParent}}" 
							HorizontalScrollBarVisibility="{Binding HorizontalScrollBarVisibility,RelativeSource={RelativeSource TemplatedParent}}"
							VerticalScrollBarVisibility="{Binding VerticalScrollBarVisibility,RelativeSource={RelativeSource TemplatedParent}}"
							MaxLength="{Binding MaxLength,RelativeSource={RelativeSource TemplatedParent}}"
							IsReadOnly="{Binding IsDisableInput,RelativeSource={RelativeSource TemplatedParent}}"
							IsEnabled="{Binding IsEnabled,RelativeSource={RelativeSource TemplatedParent}}"
							BorderThickness="{Binding BorderThickness,RelativeSource={RelativeSource TemplatedParent}}"
							BorderBrush="{Binding BorderBrush,RelativeSource={RelativeSource TemplatedParent}}"
							local:TextBoxFile.IsEnabledDragFile="True"/>

						<Label
							x:Name="btn"
							Grid.Column="1"
							Content="{Binding ButtonContent,RelativeSource={RelativeSource TemplatedParent}}"
							Foreground="{Binding ContentColor,RelativeSource={RelativeSource TemplatedParent}}"
							Padding="0,0,0,3"
							HorizontalContentAlignment="Center"
							Background="Transparent"
							BorderBrush="{Binding ButtonColor,RelativeSource={RelativeSource TemplatedParent}}"
							VerticalContentAlignment="{Binding VerticalContentAlignment,RelativeSource={RelativeSource TemplatedParent}}"
							local:XEvtTrigger.IsEnabledMouseLeftButtonDown="True"
							local:XEvtTrigger.MouseLeftButtonUp="{Binding CmdOpenFile, RelativeSource={RelativeSource Mode=FindAncestor,AncestorType={x:Type local:TextBoxFile}}}"
							>
							<!--<Label.Resources>
								<Style TargetType="{x:Type Label}">
									<Style.Triggers>
										<Trigger Property="IsMouseOver" Value="True">
											<Setter Property="local:TextBoxFile._ButtonHeight" Value="3"/>
										</Trigger>
									</Style.Triggers>
								</Style>
							</Label.Resources>-->
							<!--<i:Interaction.Triggers>
								<i:EventTrigger EventName="MouseLeftButtonUp" >
									<i:InvokeCommandAction Command="{Binding CmdOpenFile, RelativeSource={RelativeSource Mode=FindAncestor,AncestorType={x:Type local:TextBoxFile}}}" />
								</i:EventTrigger>
							</i:Interaction.Triggers>-->
							<Label.Style>
								<Style TargetType="Label">
									<Setter Property="BorderThickness" Value="0,0,0,3" />
									<Style.Triggers>
										<Trigger Property="IsMouseOver" Value="True">
											<Setter Property="BorderThickness" Value="0,0,0,7" />
										</Trigger>
										<Trigger Property="local:XEvtTrigger.IsMouseLeftButtonDown" Value="True">
											<Setter Property="BorderThickness" Value="0,0,0,3" />
										</Trigger>
									</Style.Triggers>
								</Style>
							</Label.Style>
						</Label>

						<!--<Rectangle
							Grid.Column="1"
							Grid.Row="1"
							IsHitTestVisible="False"
							Fill="{Binding ButtonColor,RelativeSource={RelativeSource TemplatedParent}}"
							/>-->
					</Grid>
				</ControlTemplate>
			</Setter.Value>
		</Setter>

		<Style.Triggers>
			<!--<Trigger Property="Text" Value="{x:Null}">
				<Setter Property="_ShowTip" Value="Visible"/>
			</Trigger>
			<Trigger Property="Text" Value="">
				<Setter Property="_ShowTip" Value="Visible"/>
			</Trigger>-->
		</Style.Triggers>
	</Style>

	<Style BasedOn="{StaticResource BaseTextBoxFile}" TargetType="{x:Type local:TextBoxFile}">
		<Setter Property="BorderThickness" Value="0,0,0,1"/>
		<Setter Property="BorderBrush" Value="#a1a1a1"/>
	</Style>

</ResourceDictionary>